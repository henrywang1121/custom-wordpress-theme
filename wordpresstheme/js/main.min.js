jQuery(function (e) {
  e(document).click(function () {
    e('body').removeClass('nav-menu-show'),
      e(
        '.site-header__navigation__menu .menu-item-has-children.show'
      ).removeClass('show'),
      e('body').removeClass('vehicle-dropdown-show');
  }),
    e(document).on('touchstart', function (s) {
      if (e('body').hasClass('nav-menu-show')) {
        const a = s.touches[0].clientX;
        e(document).on('touchend', function (s) {
          s.changedTouches[0].clientX - a > 100 &&
            e('body').removeClass('nav-menu-show');
        });
      }
    });
  const s = e('#site-header__navigation__toggle__text');
  if (
    (e('#site-header__navigation__toggle').on('click', function (a) {
      a.stopPropagation(),
        e('body').toggleClass('nav-menu-show'),
        s.text(e('body').hasClass('nav-menu-show') ? 'Close' : 'Menu');
    }),
    e('#site-header__navigation__backdrop').on('click', function (a) {
      a.stopPropagation(),
        e('body').removeClass('nav-menu-show'),
        s.text('Menu');
      const t = e('.site-header__navigation__menu .open-vehicle-dropdown');
      t.hasClass('show') &&
        (t.find('a').attr('aria-expanded', 'false'), t.removeClass('show')),
        e('body').removeClass('vehicle-dropdown-show');
    }),
    e('.site-header__navigation__menu .menu-item-has-children > a').on(
      'click',
      function (s) {
        s.preventDefault(), s.stopPropagation();
        const a = e(this).parent();
        return (
          e('body').removeClass('vehicle-dropdown-show'),
          a.hasClass('show')
            ? (e(this).attr('aria-expanded', 'false'), a.removeClass('show'))
            : (e(this).attr('aria-expanded', 'true'),
              a.siblings('li').removeClass('show'),
              a.addClass('show'),
              a.hasClass('open-vehicle-dropdown') &&
                e('body').addClass('vehicle-dropdown-show')),
          !1
        );
      }
    ),
    e('.widow-fix').each(function () {
      const s = e(this).text().split(' ');
      let a = '';
      for (let e = 0; e <= s.length - 1; e++)
        (a += s[e]), e == s.length - 2 ? (a += '&nbsp;') : (a += ' ');
      e(this).html(a);
    }),
    'undefined' != typeof sd)
  ) {
    const s = e('body').data(),
      a = {
        pageType: s.sdPageType,
        websiteTier: 'Tier 3',
        pageBrand: 'car',
        language: 'en',
        dealerZipCode: s.sdDealerZipCode,
        dealerState: 'CA',
        trafficType: customMain.trafficType,
      };
    if ('Vehicle Details' === s.sdPageType) {
      const s = e('.vdp').data();
      a.vehicleDetails = {
        status: s.condition,
        year: s.year,
        make: s.make,
        model: s.model,
        trim: s.trim,
        engine: s.engine,
        transmission: s.transmissionType,
        exteriorColor: s.exteriorColor,
        vin: s.vin,
        msrp: s.msrp,
        displayedPrice: s.displayedPrice,
      };
    }
    sd('dataLayer', a),
      sd('send', 'pageview'),
      e('a')
        .not('[href^="#"]')
        .on('click', function () {
          const s = e(this);
          sd('send', 'event', 'Link Clicked', {
            hitCallback: function () {
              '_blank' === s.attr('target')
                ? window.open(s.attr('href'))
                : (window.location.href = s.attr('href'));
            },
          });
        }),
      e('body').hasClass('filter-results') &&
        (sd('dataLayer', {
          countSearchResults: s.sdCountSearchResults,
          filterSearch: {
            status: s.sdFilterSearch.status,
            year: s.sdFilterSearch.year,
            make: s.sdFilterSearch.make,
            model: s.sdFilterSearch.model,
            trim: s.sdFilterSearch.trim,
            color: s.sdFilterSearch.color,
            minPrice: s.sdFilterSearch.minPrice,
            maxPrice: s.sdFilterSearch.maxPrice,
            bodyStyle: s.sdFilterSearch.bodyStyle,
            features: s.sdFilterSearch.features,
          },
          events: 'filterSearch',
        }),
        sd('send')),
      e('body').hasClass('search-results') &&
        (sd('dataLayer', {
          typedSearchContent: s.sdTypedSearchContent,
          events: 'typedSearch',
        }),
        sd('send')),
      'OEM Incentives' === s.sdPageType &&
        e('.special__ctas a').on('click', function () {
          const s = e(this).parents('.special');
          sd('dataLayer', {
            offerClick: {
              offerId: s.data('sd-offer-id'),
              offerName: s.data('sd-offer-name'),
            },
            events: 'offerClick',
          }),
            sd('send');
        }),
      'Home' === s.sdPageType &&
        e('.home__carousel a').on('click', function () {
          sd('dataLayer', {
            carouselClick: {
              assetPosition: e(this).data('asset-position'),
              assetName: e(this).data('asset-name'),
            },
            events: 'carouselClick',
          }),
            sd('send');
        }),
      e('a[href^="tel:"]').on('click', function () {
        sd('dataLayer', {
          clickToCallDepartment: e(this).data('sd-department'),
          events: 'clickToCall',
        }),
          sd('send');
      }),
      e('.form--contact, .form--parts, .form--sales').one(
        'click keydown',
        function () {
          const s = { formType: '', events: 'formInitiation' };
          e(this).hasClass('.form--sales')
            ? (s.formType = 'Request More Info')
            : e(this).hasClass('form--parts')
            ? (s.formType = 'Parts')
            : e(this).hasClass('form--contact') &&
              (s.formType = 'General Contact'),
            sd('dataLayer', s),
            sd('send');
        }
      );
  }
}),
  document.addEventListener('DOMContentLoaded', function () {
    var e = [].slice.call(document.querySelectorAll('.lazy-background'));
    if ('IntersectionObserver' in window) {
      let s = new IntersectionObserver(function (e, a) {
        e.forEach(function (e) {
          e.isIntersecting &&
            (e.target.classList.add('visible'), s.unobserve(e.target));
        });
      });
      e.forEach(function (e) {
        s.observe(e);
      });
    }
  });
